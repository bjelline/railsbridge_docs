
goals do
  goal "Add all our files to the git repository"

  message "In order to publish our application, we need to add our application and any changes we make over time to a \"revision control system\". Rails already set up *git* for us."
end

steps do

  step do
    message "Find the Tool git, and press the Button 'Initialize Git Repository'"
  end

  step do
    console "git status"

    message "`git status` tells you everything git sees as modified, new, or missing."
    message "Right now there is nothing new to report."
  end

  step do
    console "git log"

    message "`git log` shows you everything that happend until now."
    message "You will see one entry in the log, the 'Initial commit'."

    img src: "img/repl_git_log.png", alt: "git log showing inital commit"

  end

  step do
    console "git add -A"
    message "`git add -A` tells git that you want to add the current directory (aka `.`) and everything under it to the repo."
    tip "git add" do
      message <<-MARKDOWN
        With Git, there are usually many ways to do very similar things.

        * `git add foo.txt` adds a file named `foo.txt`
        * `git add .` adds all new files and changed files, but *keeps* files that you've deleted
        * `git add -A` adds everything, including deletions

        "Adding deletions" may sound weird, but if you think of a version control system as keeping
        track of *changes*, it might make more sense. Most people use `git add .` but `git add -A`
        can be safer. No matter what, `git status` is your friend.
      MARKDOWN
    end
  end

  step do
    console "git status"

    message "Now you should see a bunch of files listed in green under `Changes to be committed`."
  end

  step do
    console "git commit -m \"empty Rail 7 app\""
    message "`git commit` tells git to actually _do_ all things you've said you wanted to do."
    message "This is done in two steps so you can group multiple changes together."
    message "the Text after `-m`  is a message to your future self or to other developers. Just a short description of what happened in this step."
  end

  step do
    console "git status"

    message "Now you should see something like `nothing to commit, working directory clean` which means you've committed all of your changes."
  end
end

explanation do
  message <<-MARKDOWN
By checking your application into git now, you're creating a record of your starting point. Whenever you make a change during today's workshop, we'll add it to git before moving on. This way, if anything ever breaks, or you make a change you don't like, you can use git as an all-powerful "undo" technique. But that only works when you remember to commit early and often!
  MARKDOWN
end

next_step "running_your_application_locally"
